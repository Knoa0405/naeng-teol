generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?        @unique
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  role          role           @default(USER)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  avatar        String?
  bio           String?
  instagram     String?
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  isDeleted     Boolean        @default(false) @map("is_deleted")
  accounts      Account[]
  blockedBy     Block[]        @relation("Blocked")
  blocks        Block[]        @relation("Blocker")
  commentLikes  CommentLike[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  posts         Post[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token") @db.Text
  access_token      String? @map("access_token") @db.Text
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token") @db.Text
  session_state     String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id          Int             @id @default(autoincrement())
  title       String
  content     String
  ingredients String[]
  rawContent  String          @map("raw_content")
  authorId    String          @map("author_id")
  views       Int             @default(0)
  likesCount  Int             @default(0) @map("likes_count")
  createdAt   DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  isDeleted   Boolean         @default(false) @map("is_deleted")
  comments    Comment[]
  likes       Like[]
  author      User            @relation(fields: [authorId], references: [id])
  images      ImageRelation[]

  @@map("posts")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  hash      String?  @unique
  alt       String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  relations ImageRelation[]

  @@map("images")
}

enum EntityType {
  POST
  COMMENT
}

model ImageRelation {
  id        Int      @id @default(autoincrement())
  order     Int      @default(0)
  imageId   Int
  postId    Int?
  commentId Int?
  image     Image    @relation(fields: [imageId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@unique([postId, order])
  @@unique([commentId, order])
  @@index([imageId])
  @@map("image_relations")
}

model Comment {
  id         Int             @id @default(autoincrement())
  authorId   String          @map("author_id")
  createdAt  DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  content    String
  postId     Int             @map("post_id")
  parentId   Int?            @map("parent_id")
  updatedAt  DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  likesCount Int             @default(0) @map("likes_count")
  isDeleted  Boolean         @default(false) @map("is_deleted")
  likes      CommentLike[]
  author     User            @relation(fields: [authorId], references: [id])
  parent     Comment?        @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[]       @relation("CommentReplies")
  post       Post            @relation(fields: [postId], references: [id])
  images     ImageRelation[]

  @@map("comments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  type      String
  content   String
  isRead    Boolean  @default(false) @map("is_read")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  commentId Int?     @map("comment_id")
  postId    Int?     @map("post_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model Block {
  id        Int      @id @default(autoincrement())
  blockerId String   @map("blocker_id")
  blockedId String   @map("blocked_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id])
  blocker   User     @relation("Blocker", fields: [blockerId], references: [id])

  @@unique([blockerId, blockedId])
  @@map("blocks")
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, postId])
  @@map("likes")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  commentId Int      @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  comment   Comment  @relation(fields: [commentId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@map("comment_likes")
}

enum role {
  ADMIN
  SUPER_ADMIN
  USER
}
