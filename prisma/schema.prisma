generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum role {
  ADMIN
  SUPER_ADMIN
  USER
}

model User {
  id         String    @id @default(cuid())
  name          String?  @unique
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts   Account[]
  sessions   Session[]
  role       role     @default(USER)
  posts      Post[]
  comments   Comment[]
  blocks     Block[]  @relation("Blocker")
  blockedBy  Block[]  @relation("Blocked")
  likes      Like[]
  commentLikes CommentLike[]
  updatedAt DateTime  @updatedAt @db.Timestamptz(6) @map("updated_at")
  notifications Notification[]
  // 프로필 정보
  avatar     String?
  bio        String?
  instagram  String?

  createdAt DateTime @default(now()) @db.Timestamptz(6) @map("created_at")
  isDeleted Boolean  @default(false) @map("is_deleted")

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refreshToken       String? @db.Text @map("refresh_token")
  accessToken        String? @db.Text @map("access_token")
  expiresAt          Int?    @map("expires_at")
  tokenType          String? @map("token_type")
  scope              String?
  idToken            String? @db.Text @map("id_token")
  sessionState       String? @map("session_state")
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id         BigInt   @id @default(autoincrement())
  createdAt DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")
  title      String
  content    String
  ingredients String[]
  rawContent String   @map("raw_content")
  author     User     @relation(fields: [authorId], references: [id])
  authorId  String    @map("author_id")
  views      Int      @default(0)
  comments   Comment[]
  likes      Like[]
  likesCount Int      @default(0) @map("likes_count")
  updatedAt DateTime  @updatedAt @db.Timestamptz(6) @map("updated_at")
  isDeleted Boolean   @default(false) @map("is_deleted")

  @@map("posts")
}

model Comment {
  id          BigInt     @id @default(autoincrement())
  author      User       @relation(fields: [authorId], references: [id])
  authorId   String      @map("author_id")
  createdAt  DateTime    @default(now()) @db.Timestamptz(6) @map("created_at")
  content     String
  post        Post       @relation(fields: [postId], references: [id])
  postId     BigInt      @map("post_id")
  parent      Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  parentId   BigInt?     @map("parent_id")
  replies     Comment[]  @relation("CommentReplies")
  updatedAt  DateTime    @updatedAt @db.Timestamptz(6) @map("updated_at")
  likes       CommentLike[]
  likesCount Int         @default(0) @map("likes_count")
  isDeleted  Boolean     @default(false) @map("is_deleted")

  @@map("comments")
}

model Notification {
  id          BigInt    @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId     String     @map("user_id")
  type        String    
  content     String    
  isRead     Boolean   @default(false) @map("is_read")
  createdAt  DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")
  commentId  BigInt?   @map("comment_id")
  postId     BigInt?   @map("post_id")

  @@map("notifications")
}

model Block {
  id          BigInt   @id @default(autoincrement())
  blocker     User     @relation("Blocker", fields: [blockerId], references: [id])
  blockerId  String    @map("blocker_id")
  blocked     User     @relation("Blocked", fields: [blockedId], references: [id])
  blockedId  String    @map("blocked_id")
  createdAt  DateTime  @default(now()) @db.Timestamptz(6) @map("created_at")

  @@unique([blockerId, blockedId])
  @@map("blocks")
}

model Like {
  id          BigInt    @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId     String     @map("user_id")
  post        Post      @relation(fields: [postId], references: [id])
  postId     BigInt     @map("post_id")
  createdAt  DateTime   @default(now()) @db.Timestamptz(6) @map("created_at")

  @@unique([userId, postId])
  @@map("likes")
}

model CommentLike {
  id          BigInt    @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId     String     @map("user_id")
  comment     Comment   @relation(fields: [commentId], references: [id])
  commentId  BigInt     @map("comment_id")
  createdAt  DateTime   @default(now()) @db.Timestamptz(6) @map("created_at")

  @@unique([userId, commentId])
  @@map("comment_likes")
}
